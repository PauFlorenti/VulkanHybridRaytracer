#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable

#include "raycommon.glsl"
#include "helpers.glsl"

layout (set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout (set = 0, binding = 1, rgba8) uniform image2D image;
layout (set = 0, binding = 2) uniform CameraProperties 
{
	mat4 viewInverse;
	mat4 projInverse;
	vec4 frame;
} cam;
layout (set = 0, binding = 3) uniform sampler2D[] gbuffers;
layout (set = 0, binding = 4) buffer Lights { Light lights[]; } lightsBuffer;
layout (set = 0, binding = 9) buffer MaterialBuffer { Material mat[]; } materials;
layout (set = 0, binding = 10) uniform sampler2D[] environmentTexture;
layout (set = 0, binding = 12, rgba8) uniform readonly image2D[] shadowImage; 

layout(location = 0) rayPayloadEXT hitPayload prd;
layout(location = 1) rayPayloadEXT bool isShadowed;

void main()
{
	uint frame = int(cam.frame.x);
	prd.seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, frame);

    const vec2 pixelCenter	= vec2(gl_LaunchIDEXT.xy) + vec2(0.5);	// gl_LaunchIDEXT represents the floating-point pixel coordinates normalized between 0 and 1
	const vec2 inUV 		= pixelCenter/vec2(gl_LaunchSizeEXT.xy);	//gl_LaunchSizeExt is the image size provided in the traceRayEXT function
	
	float matIdx 			= texture(gbuffers[0], inUV).w;
	Material mat 			= materials.mat[int(matIdx)];
	int shadingMode 		= int(mat.shadingMetallicRoughness.x);

    vec3 position 			= texture(gbuffers[0], inUV).xyz;
	vec3 normal 			= texture(gbuffers[1], inUV).xyz * 2.0 - vec3(1);
	vec3 albedo 			= pow(texture(gbuffers[2], inUV).xyz, vec3(2.2));
	vec2 motion	 			= texture(gbuffers[3], inUV).xy;
	vec3 material 			= texture(gbuffers[4], inUV).xyz;
	vec3 emissive 			= texture(gbuffers[5], inUV).xyz;
	bool background 		= texture(gbuffers[0], inUV).w == 0 && texture(gbuffers[1], inUV).w == 0;

	const float roughness 	= material.y;
	const float metallic 	= material.z;
	const vec3 F0 = mix(vec3(0.04), albedo, metallic);

	// Using the pixel coordinates we can apply the inverse transformation of the view and procjection matrices of the camera to obtain
	// the origin and target of the ray
	const vec4 camPosition	= cam.viewInverse * vec4(0,0,0,1);
    const vec3 V			= normalize(camPosition.xyz - position);
    const vec3 N 			= normalize(normal);
	const float NdotV 		= clamp(dot(N, V), 0.0, 1.0);

	// Environment 
  	vec2 environmentUV = vec2(0.5 + atan(N.x, N.z) / (2 * PI), 0.5 - asin(N.y) / PI);
  	vec3 irradiance = texture(environmentTexture[1], environmentUV).xyz;

	float tmin 				= 0.001;
	float tmax 				= 1000.0;

	vec3 finalColor 		= vec3(0);
	vec3 origin 			= vec3(0);
	vec3 direction 			= vec3(0);
	float attenuation 		= 1.0;
	float shadowFactor		= 0.0;

	// Calculate the light influence for each light
	vec3 rayColor = vec3(0.0);
	for(int i = 0; i < lightsBuffer.lights.length(); i++)
	{
		Light light 					= lightsBuffer.lights[i];
		const bool isDirectional 		= light.pos.w < 0;
		vec3 L 							= isDirectional ? light.pos.xyz : (light.pos.xyz - position.xyz);
		const float light_max_distance 	= light.pos.w;
		const float light_distance 		= length(L);
		const float light_intensity 	= isDirectional ? 1.0f : (light.color.w / (light_distance * light_distance));
		L 								= normalize(L);
		const float NdotL 				= clamp(dot(N, L), 0.0, 1.0);
		shadowFactor 					= imageLoad(shadowImage[i], ivec2(gl_LaunchIDEXT.xy)).x;
		
		// Check if visible for light
		if(NdotL > 0.0)
		{
			// Calculate attenuation factor
			// ----------------------------
			if(light_intensity == 0){
				attenuation = 0.0;
			}
			else{
				attenuation = light_max_distance - light_distance;
				attenuation /= light_max_distance;
				attenuation = max(attenuation, 0.0);
				attenuation = isDirectional ? 0.3 : (attenuation * attenuation);
			}
		}
		tmax = 1000.0;

		// Calculate illumination
		//-----------------------
		// In case material is diffuse, no need to ray trace at the moment
		if( shadingMode == 0 )
		{
			vec3 radiance 	= light.color.xyz * light_intensity * attenuation * shadowFactor;
			const vec3 H 	= normalize(V + L);
			float D 		= DistributionGGX(N, H, roughness);
			float G 		= GeometrySmith(N, V, L, roughness);
			vec3 F 			= FresnelSchlick(max(dot(H, V), 0.0), F0);
			vec3 kD = vec3(1.0) - F;
			kD *= 1.0 - metallic;

			vec3 numerator 		= D * G * F;
			float denominator 	= 4.0 * NdotV * NdotL;
			vec3 specular 		= numerator / max(denominator, 0.001);

			vec3 kS = F;

			rayColor += (kD * albedo / PI + specular) * radiance * NdotL;
		}
		if( shadingMode == 3 )
		{
			direction 			= reflect(normalize(-V), N);
			origin 				= position;
			rayColor += (NdotL > 0.0 && light_intensity > 0.0) ? 
						light.color.xyz * light_intensity * attenuation * shadowFactor * albedo * metallic : 
						irradiance * albedo * metallic;
		}
		if(shadingMode == 4)
		{
			float ior 				= mat.diffuse.w;
			origin 					= position;
			const float cosAlpha 	= dot(N, V);
			const vec3 	I 			= -V; // incident ray
			float NdotI 			= dot( N, I );
			vec3 refrNormal 		= NdotI > 0.0 ? -N : N;
			float refrEta 			= NdotI > 0.0 ?  1 / ior : ior;

			prd.direction.w 		= 1;
			
			float radicand 	= 1 + pow(refrEta, 2.0) * (cosAlpha * cosAlpha - 1);
			direction 		= radicand < 0.0 ? reflect(I, N) : refract(I, refrNormal, refrEta);
			rayColor += (light_intensity > 0.0) ? 
						light_intensity * light.color.xyz * attenuation * albedo * metallic : 
						irradiance * albedo * metallic;
		}
	}

	// RECURSION IF NEEDED FOR BOUNCING
	// --------------------------------
	for(int depth = 0; depth < MAX_RECURSION; depth++)
	{
		if(shadingMode == 0)
			break;
		
		traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz + direction * 1e-2, tmin, direction, tmax, 0);
		rayColor *= prd.colorAndDist.xyz;
		const float hitDistance = prd.colorAndDist.w;
		const bool isScattered 	= prd.direction.w > 0;

		if( hitDistance < 0 || !isScattered){
			break;
		}
		else{
			origin.xyz 		= prd.origin.xyz;
			direction.xyz 	= prd.direction.xyz;
		}
	}

	finalColor = rayColor;

	// Ambient from IBL
  	vec3 F 			= FresnelSchlick(NdotV, F0);
  	vec3 kD 		= (1.0 - F) * (1.0 - metallic);
  	vec3 diffuse 	= kD * albedo * irradiance;
  	vec3 ambient 	= diffuse;

	finalColor += ambient + emissive;
	
	if(background)
		finalColor = albedo;

	finalColor = vec3(imageLoad(shadowImage[0], ivec2(gl_LaunchIDEXT.xy)).x);
	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(finalColor, 1.0));
	/*
	if(frame > 0.0)
	{
		imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(finalColor, 1.0));
	}
	else
	{
		float a = 1.0 / float(1.0 + frame);
		vec3 old = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).rgb;
		vec3 color = mix(old, finalColor, a);
		imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.));
	}
	*/
}