#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : enable

#include "helpers.glsl"

layout(binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, rgba8) uniform image2D[3] shadowImage;
layout(binding = 2) uniform CameraProperties 
{
	mat4 viewInverse;
	mat4 projInverse;
	float frame;
} cam;
layout(binding = 3, std140) buffer Lights { Light lights[]; } lightsBuffer;
layout(binding = 4) uniform SampleBuffer {int samples;} samplesBuffer;
layout(binding = 5) uniform sampler2D[3] gbuffers;
layout(binding = 6) buffer MaterialBuffer { Material mat[]; } materials;

struct shadowPayload{
	uint seed;
	float frame;
};

layout(location = 0) rayPayloadEXT bool shadowed;

void main() 
{
	int frame = int(cam.frame);
	uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, uint(frame));

	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);

	vec3 position 	= texture(gbuffers[0], inUV).xyz;
	vec3 normal 	= texture(gbuffers[1], inUV).rgb * 2.0 - vec3(1.0);
	vec2 motion 	= texture(gbuffers[2], inUV).xy * 2.0 - vec2(1.0);
	float matIdx 	= texture(gbuffers[0], inUV).w;
	int mode 		= int(materials.mat[int(matIdx)].shadingMetallicRoughness.x);
	vec3 N = normalize(normal);

	if(mode == 4)
	{
		for(int i = 0; i < lightsBuffer.lights.length(); i++)
		{
			imageStore(shadowImage[i], ivec2(gl_LaunchIDEXT.xy), vec4(1, 0, 0, 1));
		}
		return;
	}

	for(int i = 0; i < lightsBuffer.lights.length(); i++)
	{
		// Init basic light information
    	Light light                     = lightsBuffer.lights[i];
    	const bool isDirectional        = light.pos.w < 0;
		vec3 L                          = isDirectional ? light.pos.xyz : (light.pos.xyz - position);
		const float light_max_distance  = light.pos.w;
		const float light_distance      = length(L);
    	L                               = normalize(L);
		const float NdotL               = clamp(dot(N, L), 0.0, 1.0);
		const float light_intensity     = isDirectional ? 1.0 : (light.color.w / (light_distance * light_distance));
    	float shadowFactor              = 0.0;
    	int shadowSamples               = samplesBuffer.samples;

		if( NdotL > 0)
		{
			for(int s = 0; s < shadowSamples; s++)
			{
				if(light_distance < light_max_distance)
				{
					shadowed 			= true;
					const vec3 dir 		= sampleDisk(light, position, L, seed);
					const uint flags  	= gl_RayFlagsOpaqueEXT | gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsSkipClosestHitShaderEXT;
					float tmin = 0.001, tmax = light_distance + 1;

					// Shadow ray cast
					traceRayEXT(topLevelAS, flags, 0xFF, 0, 0, 0, 
					position + dir * 1e-1, tmin, dir, tmax, 0);
				}
				else{
					shadowed = false;
				}
				
        		if(!shadowed){
        		  shadowFactor++;
        		}
			}
			shadowFactor /= shadowSamples;
		}

		vec3 color = vec3(shadowFactor);
		imageStore(shadowImage[i], ivec2(gl_LaunchIDEXT.xy), vec4(color, 1));
		/*
		if(frame > 0)
		{
			float a = 1.0f / float(frame + 1);
			
			vec3 old = imageLoad(shadowImage[i], ivec2(gl_LaunchIDEXT.xy)).rgb;
			vec3 color = mix(old, vec3(shadowFactor), a);
			imageStore(shadowImage[i], ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.));
		}
		else
		{
			// Calculate motion vector
			motion.y = 1.0 - motion.y;
			vec2 reprojectedUV = gl_LaunchIDEXT.xy - motion;

			// Mix reprojected old color with new color
			float old = imageLoad(shadowImage[i], ivec2(reprojectedUV)).r;

			vec3 color = mix(vec3(old), vec3(shadowFactor), 0.5);
			imageStore(shadowImage[i], ivec2(gl_LaunchIDEXT.xy), vec4(color, 1));
		}
		*/
	}
}
