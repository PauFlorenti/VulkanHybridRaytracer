#version 450

#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable

const int SIZE = 9;
const int NLIGHTS = 3;

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform readonly image2D[NLIGHTS] inputImage;
layout (binding = 1, rgba8) uniform image2D[NLIGHTS] outputImage;
layout (binding = 2) uniform FrameCount {int frame;} frameBuffer;

struct ImageData
{
	float r[SIZE];
	float g[SIZE];
	float b[SIZE];
} imageData;

float conv(in float[SIZE] kernel, in float[SIZE] data, in float denom, in float offset) 
{
	float res = 0.0;
	for (int i = 0; i < SIZE; i++)
	{
		res += kernel[i] * data[i];
	}
	return clamp(res/denom + offset, 0.0, 1.0);
}

void main()
{	
	for(int l = 0; l < NLIGHTS; l++)
	{
		int frame = frameBuffer.frame;
		vec3 pixelColor;
		if(frame > 0)
		{
			vec3 center = imageLoad(inputImage[l], ivec2(gl_GlobalInvocationID.xy)).rgb;
			vec3 old = imageLoad(outputImage[l], ivec2(gl_GlobalInvocationID.xy)).rgb;
			float a = 1.0 / float(frame + 1.0);
			pixelColor = mix(old, center, a);
			pixelColor = vec3(0);
			imageStore(outputImage[l], ivec2(gl_GlobalInvocationID.xy), vec4(pixelColor, 1.0));
		}
		else
		{
			vec3 center = imageLoad(inputImage[l], ivec2(gl_GlobalInvocationID.xy)).rgb;
			vec3 minColor = center;
			vec3 maxColor = center;

			for(int y = -1; y <= 1; y++)
			{
				for(int x = -1; x <= 1; x++)
				{
					if(x == 0 && y == 0)
						continue;

					ivec2 offsetUV = ivec2(gl_GlobalInvocationID.x + x, gl_GlobalInvocationID.y + y);
					vec3 color = imageLoad(inputImage[l], offsetUV).rgb;
					minColor = min(minColor, color);
					maxColor = max(maxColor, color);
				}
			}

			vec3 old = imageLoad(outputImage[l], ivec2(gl_GlobalInvocationID.xy)).rgb;
			old = max(minColor, old);
			old = min(maxColor, old);

			float a = 0.2f;
			pixelColor = mix(old, center, a);
			pixelColor = vec3(0);
			imageStore(outputImage[l], ivec2(gl_GlobalInvocationID.xy), vec4(pixelColor, 1.0));
		}
	}
}